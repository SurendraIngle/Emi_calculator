{"ast":null,"code":"export function calculateEmi(loanDetail) {\n  let response = {};\n  let monthlyInterest = loanDetail.interestRate / 1200;\n  let tenure = loanDetail.tenure;\n  let powMonthTenure = Math.pow(1 + monthlyInterest, tenure);\n  response.emi = Math.ceil(loanDetail.loanAmount * monthlyInterest * powMonthTenure / (powMonthTenure - 1));\n  console.log(\"Calculate EMI Response \", response);\n  return response;\n}\nexport function getRepaymentSchedule(loanScheduleRequest) {\n  let dataList = [];\n  let principalAmount = loanScheduleRequest.loanAmount;\n  let date = new Date();\n  date.setDate(1); // First day of next month\n  date.setMonth(date.getMonth() + 1);\n  date.setDate(5);\n  for (let month = 0; month < loanScheduleRequest.tenure; month++) {\n    let loanMonthData = {};\n    date.setMonth(date.getMonth() + 1);\n    let interest = Math.ceil(principalAmount * (loanScheduleRequest.interestRate / 1200));\n    principalAmount = principalAmount - (Math.ceil(loanScheduleRequest.emi) - interest);\n    loanMonthData.loanAmount = principalAmount;\n    loanMonthData.installment = loanScheduleRequest.emi;\n    loanMonthData.interestAmount = interest;\n    loanMonthData.principalAmount = Math.ceil(loanScheduleRequest.emi) - interest;\n    loanMonthData.installmentDate = new Date(date);\n    dataList.push(loanMonthData);\n  }\n  return dataList;\n}\nexport function getRepaymentScheduleWithExtraEMI(loanEMIRequest) {\n  let dataList = [];\n  let principalAmount = loanEMIRequest.loanAmount;\n  let date = new Date();\n  date.setDate(1); // First day of next month\n  date.setMonth(date.getMonth() + 1);\n  date.setDate(5);\n  let extraEmi = loanEMIRequest.emiList;\n  for (let month = 0; month < loanEMIRequest.tenure && principalAmount > 0; month++) {\n    let loanMonthData = {};\n    date.setMonth(date.getMonth() + 1);\n    let interest = Math.ceil(principalAmount * (loanEMIRequest.interestRate / 1200));\n    principalAmount = principalAmount - (Math.ceil(loanEMIRequest.emi) - interest);\n    loanMonthData.loanAmount = principalAmount;\n    loanMonthData.installment = loanEMIRequest.emi;\n    loanMonthData.interestAmount = interest;\n    loanMonthData.principalAmount = loanEMIRequest.emi - interest + extraEmi[month];\n    loanMonthData.extraEMI = extraEmi[month];\n    loanMonthData.installmentDate = new Date(date);\n    principalAmount = principalAmount - extraEmi[month];\n    dataList.push(loanMonthData);\n  }\n  return dataList;\n}","map":{"version":3,"names":["calculateEmi","loanDetail","response","monthlyInterest","interestRate","tenure","powMonthTenure","Math","pow","emi","ceil","loanAmount","console","log","getRepaymentSchedule","loanScheduleRequest","dataList","principalAmount","date","Date","setDate","setMonth","getMonth","month","loanMonthData","interest","installment","interestAmount","installmentDate","push","getRepaymentScheduleWithExtraEMI","loanEMIRequest","extraEmi","emiList","extraEMI"],"sources":["/Users/surendraingle/Documents/React/emi-calculator/src/calculator.js"],"sourcesContent":["export function calculateEmi(loanDetail){\n    let response={};\n    let monthlyInterest=loanDetail.interestRate / 1200;\n    let tenure=loanDetail.tenure;\n    let powMonthTenure = Math.pow(1 + monthlyInterest, tenure);\n    response.emi = Math.ceil(loanDetail.loanAmount * monthlyInterest * powMonthTenure / (powMonthTenure - 1));\n    console.log(\"Calculate EMI Response \", response);\n    return response;\n\n}\n\nexport function getRepaymentSchedule(loanScheduleRequest) {\n    let dataList = [];\n    let principalAmount = loanScheduleRequest.loanAmount;\n    let date = new Date();\n    date.setDate(1); // First day of next month\n    date.setMonth(date.getMonth() + 1);\n    date.setDate(5);\n\n    for (let month = 0; month < loanScheduleRequest.tenure; month++) {\n        let loanMonthData = {};\n        date.setMonth(date.getMonth() + 1);\n        let interest = Math.ceil(principalAmount * (loanScheduleRequest.interestRate / 1200));\n        principalAmount = principalAmount - (Math.ceil(loanScheduleRequest.emi) - interest);\n        \n        loanMonthData.loanAmount = principalAmount;\n        loanMonthData.installment = loanScheduleRequest.emi;\n        loanMonthData.interestAmount = interest;\n        loanMonthData.principalAmount = Math.ceil(loanScheduleRequest.emi) - interest;\n        loanMonthData.installmentDate = new Date(date);\n        \n        dataList.push(loanMonthData);\n    }\n    return dataList;\n}\n\nexport function getRepaymentScheduleWithExtraEMI(loanEMIRequest) {\n    let dataList = [];\n    let principalAmount = loanEMIRequest.loanAmount;\n    let date = new Date();\n    date.setDate(1); // First day of next month\n    date.setMonth(date.getMonth() + 1);\n    date.setDate(5);\n    let extraEmi = loanEMIRequest.emiList;\n\n    for (let month = 0; month < loanEMIRequest.tenure && principalAmount > 0; month++) {\n        let loanMonthData = {};\n        date.setMonth(date.getMonth() + 1);\n        let interest = Math.ceil(principalAmount * (loanEMIRequest.interestRate / 1200));\n        principalAmount = principalAmount - (Math.ceil(loanEMIRequest.emi) - interest);\n        \n        loanMonthData.loanAmount = principalAmount;\n        loanMonthData.installment = loanEMIRequest.emi;\n        loanMonthData.interestAmount = interest;\n        loanMonthData.principalAmount = (loanEMIRequest.emi - interest) + extraEmi[month];\n        loanMonthData.extraEMI = extraEmi[month];\n        loanMonthData.installmentDate = new Date(date);\n        \n        principalAmount = principalAmount - extraEmi[month];\n        dataList.push(loanMonthData);\n    }\n    return dataList;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}