{"ast":null,"code":"export function calculateEmi(loanDetail) {\n  let response = {};\n  let monthlyInterest = loanDetail.interestRate / 1200;\n  let tenure = loanDetail.tenure * 12;\n  let powMonthTenure = Math.pow(1 + monthlyInterest, tenure);\n  response.emi = Math.ceil(loanDetail.loanAmount * monthlyInterest * powMonthTenure / (powMonthTenure - 1));\n  // console.log(\"Calculate EMI Response \", response);\n  return response;\n}\nexport function getRepaymentSchedule(loanScheduleRequest) {\n  let dataList = [];\n  let principalAmount = loanScheduleRequest.loanAmount;\n  let date = new Date();\n  date.setDate(1); // First day of next month\n  date.setMonth(date.getMonth() + 1);\n  date.setDate(5);\n  for (let month = 0; month < loanScheduleRequest.tenure * 12; month++) {\n    let loanMonthData = {};\n    date.setMonth(date.getMonth() + 1);\n    let interest = Math.ceil(principalAmount * (loanScheduleRequest.interestRate / 1200));\n    principalAmount = principalAmount - (Math.ceil(loanScheduleRequest.emi) - interest);\n    loanMonthData.loanAmount = principalAmount;\n    loanMonthData.installment = loanScheduleRequest.emi;\n    loanMonthData.interestAmount = interest;\n    loanMonthData.principalAmount = Math.ceil(loanScheduleRequest.emi) - interest;\n    loanMonthData.installmentDate = new Date(date);\n    dataList.push(loanMonthData);\n  }\n  return dataList;\n}\nlet newInterest = 0;\nexport function getRepaymentScheduleWithExtraEMI(loanEMIRequest) {\n  let totalInterestNew = 0;\n  let dataList = [];\n  let principalAmount = loanEMIRequest.loanAmount;\n  let date = new Date();\n  date.setDate(1); // First day of next month\n  date.setMonth(date.getMonth() + 1);\n  date.setDate(5);\n  let extraEmi = loanEMIRequest.emiList;\n  for (let month = 0; month < loanEMIRequest.tenure * 12 && principalAmount > 0; month++) {\n    let loanMonthData = {};\n    date.setMonth(date.getMonth() + 1);\n    let interest = Math.ceil(principalAmount * (loanEMIRequest.interestRate / 1200));\n    principalAmount = principalAmount - (Math.ceil(loanEMIRequest.emi) - interest);\n    totalInterestNew = totalInterestNew + interest;\n    loanMonthData.loanAmount = principalAmount;\n    loanMonthData.installment = loanEMIRequest.emi;\n    loanMonthData.interestAmount = interest;\n    loanMonthData.principalAmount = loanEMIRequest.emi - interest + parseInt(extraEmi[month]);\n    loanMonthData.extraEMI = extraEmi[month];\n    loanMonthData.installmentDate = new Date(date);\n    principalAmount = principalAmount - extraEmi[month];\n    dataList.push(loanMonthData);\n  }\n  newInterest = totalInterestNew;\n  return dataList;\n}\nexport function getNewLoanDetails(loanAmount) {\n  const newLoanDetail = {\n    newInterest: newInterest,\n    totalAmountTopay\n  };\n}","map":{"version":3,"names":["calculateEmi","loanDetail","response","monthlyInterest","interestRate","tenure","powMonthTenure","Math","pow","emi","ceil","loanAmount","getRepaymentSchedule","loanScheduleRequest","dataList","principalAmount","date","Date","setDate","setMonth","getMonth","month","loanMonthData","interest","installment","interestAmount","installmentDate","push","newInterest","getRepaymentScheduleWithExtraEMI","loanEMIRequest","totalInterestNew","extraEmi","emiList","parseInt","extraEMI","getNewLoanDetails","newLoanDetail","totalAmountTopay"],"sources":["/Users/surendraingle/Documents/React/emi-calculator/src/calculator.js"],"sourcesContent":["export function calculateEmi(loanDetail){\n    let response={};\n    let monthlyInterest=loanDetail.interestRate / 1200;\n    let tenure=loanDetail.tenure*12;\n    let powMonthTenure = Math.pow(1 + monthlyInterest, tenure);\n    response.emi = Math.ceil(loanDetail.loanAmount * monthlyInterest * powMonthTenure / (powMonthTenure - 1));\n   // console.log(\"Calculate EMI Response \", response);\n    return response;\n\n}\n\nexport function getRepaymentSchedule(loanScheduleRequest) {\n    let dataList = [];\n    let principalAmount = loanScheduleRequest.loanAmount;\n    let date = new Date();\n    date.setDate(1); // First day of next month\n    date.setMonth(date.getMonth() + 1);\n    date.setDate(5);\n\n    for (let month = 0; month < loanScheduleRequest.tenure*12; month++) {\n        let loanMonthData = {};\n        date.setMonth(date.getMonth() + 1);\n        let interest = Math.ceil(principalAmount * (loanScheduleRequest.interestRate / 1200));\n        principalAmount = principalAmount - (Math.ceil(loanScheduleRequest.emi) - interest);\n        \n        loanMonthData.loanAmount = principalAmount;\n        loanMonthData.installment = loanScheduleRequest.emi;\n        loanMonthData.interestAmount = interest;\n        loanMonthData.principalAmount = Math.ceil(loanScheduleRequest.emi) - interest;\n        loanMonthData.installmentDate = new Date(date);\n        \n        dataList.push(loanMonthData);\n    }\n    return dataList;\n}\n\n let newInterest=0;\nexport function getRepaymentScheduleWithExtraEMI(loanEMIRequest) {\n    let totalInterestNew=0;\n    let dataList = [];\n    let principalAmount = loanEMIRequest.loanAmount;\n    let date = new Date();\n    date.setDate(1); // First day of next month\n    date.setMonth(date.getMonth() + 1);\n    date.setDate(5);\n    let extraEmi = loanEMIRequest.emiList;\n\n    for (let month = 0; month < loanEMIRequest.tenure*12 && principalAmount > 0; month++) {\n        let loanMonthData = {};\n        date.setMonth(date.getMonth() + 1);\n        let interest = Math.ceil(principalAmount * (loanEMIRequest.interestRate / 1200));\n        principalAmount = principalAmount - (Math.ceil(loanEMIRequest.emi) - interest);\n        totalInterestNew=(totalInterestNew+interest);\n        loanMonthData.loanAmount = principalAmount;\n        loanMonthData.installment = loanEMIRequest.emi;\n        loanMonthData.interestAmount = interest;\n        loanMonthData.principalAmount = (loanEMIRequest.emi - interest) + parseInt(extraEmi[month]);\n        loanMonthData.extraEMI = extraEmi[month];\n        loanMonthData.installmentDate = new Date(date);\n        \n        principalAmount = principalAmount - extraEmi[month];\n        dataList.push(loanMonthData);\n    }\n    newInterest=totalInterestNew;\n    return dataList;\n}\nexport function getNewLoanDetails(loanAmount){\nconst newLoanDetail={\n    newInterest:newInterest,\n    totalAmountTopay\n}\n}"],"mappings":"AAAA,OAAO,SAASA,YAAYA,CAACC,UAAU,EAAC;EACpC,IAAIC,QAAQ,GAAC,CAAC,CAAC;EACf,IAAIC,eAAe,GAACF,UAAU,CAACG,YAAY,GAAG,IAAI;EAClD,IAAIC,MAAM,GAACJ,UAAU,CAACI,MAAM,GAAC,EAAE;EAC/B,IAAIC,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGL,eAAe,EAAEE,MAAM,CAAC;EAC1DH,QAAQ,CAACO,GAAG,GAAGF,IAAI,CAACG,IAAI,CAACT,UAAU,CAACU,UAAU,GAAGR,eAAe,GAAGG,cAAc,IAAIA,cAAc,GAAG,CAAC,CAAC,CAAC;EAC1G;EACC,OAAOJ,QAAQ;AAEnB;AAEA,OAAO,SAASU,oBAAoBA,CAACC,mBAAmB,EAAE;EACtD,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,eAAe,GAAGF,mBAAmB,CAACF,UAAU;EACpD,IAAIK,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EACrBD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EACjBF,IAAI,CAACG,QAAQ,CAACH,IAAI,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAClCJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;EAEf,KAAK,IAAIG,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGR,mBAAmB,CAACR,MAAM,GAAC,EAAE,EAAEgB,KAAK,EAAE,EAAE;IAChE,IAAIC,aAAa,GAAG,CAAC,CAAC;IACtBN,IAAI,CAACG,QAAQ,CAACH,IAAI,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAClC,IAAIG,QAAQ,GAAGhB,IAAI,CAACG,IAAI,CAACK,eAAe,IAAIF,mBAAmB,CAACT,YAAY,GAAG,IAAI,CAAC,CAAC;IACrFW,eAAe,GAAGA,eAAe,IAAIR,IAAI,CAACG,IAAI,CAACG,mBAAmB,CAACJ,GAAG,CAAC,GAAGc,QAAQ,CAAC;IAEnFD,aAAa,CAACX,UAAU,GAAGI,eAAe;IAC1CO,aAAa,CAACE,WAAW,GAAGX,mBAAmB,CAACJ,GAAG;IACnDa,aAAa,CAACG,cAAc,GAAGF,QAAQ;IACvCD,aAAa,CAACP,eAAe,GAAGR,IAAI,CAACG,IAAI,CAACG,mBAAmB,CAACJ,GAAG,CAAC,GAAGc,QAAQ;IAC7ED,aAAa,CAACI,eAAe,GAAG,IAAIT,IAAI,CAACD,IAAI,CAAC;IAE9CF,QAAQ,CAACa,IAAI,CAACL,aAAa,CAAC;EAChC;EACA,OAAOR,QAAQ;AACnB;AAEC,IAAIc,WAAW,GAAC,CAAC;AAClB,OAAO,SAASC,gCAAgCA,CAACC,cAAc,EAAE;EAC7D,IAAIC,gBAAgB,GAAC,CAAC;EACtB,IAAIjB,QAAQ,GAAG,EAAE;EACjB,IAAIC,eAAe,GAAGe,cAAc,CAACnB,UAAU;EAC/C,IAAIK,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EACrBD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EACjBF,IAAI,CAACG,QAAQ,CAACH,IAAI,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAClCJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;EACf,IAAIc,QAAQ,GAAGF,cAAc,CAACG,OAAO;EAErC,KAAK,IAAIZ,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGS,cAAc,CAACzB,MAAM,GAAC,EAAE,IAAIU,eAAe,GAAG,CAAC,EAAEM,KAAK,EAAE,EAAE;IAClF,IAAIC,aAAa,GAAG,CAAC,CAAC;IACtBN,IAAI,CAACG,QAAQ,CAACH,IAAI,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAClC,IAAIG,QAAQ,GAAGhB,IAAI,CAACG,IAAI,CAACK,eAAe,IAAIe,cAAc,CAAC1B,YAAY,GAAG,IAAI,CAAC,CAAC;IAChFW,eAAe,GAAGA,eAAe,IAAIR,IAAI,CAACG,IAAI,CAACoB,cAAc,CAACrB,GAAG,CAAC,GAAGc,QAAQ,CAAC;IAC9EQ,gBAAgB,GAAEA,gBAAgB,GAACR,QAAS;IAC5CD,aAAa,CAACX,UAAU,GAAGI,eAAe;IAC1CO,aAAa,CAACE,WAAW,GAAGM,cAAc,CAACrB,GAAG;IAC9Ca,aAAa,CAACG,cAAc,GAAGF,QAAQ;IACvCD,aAAa,CAACP,eAAe,GAAIe,cAAc,CAACrB,GAAG,GAAGc,QAAQ,GAAIW,QAAQ,CAACF,QAAQ,CAACX,KAAK,CAAC,CAAC;IAC3FC,aAAa,CAACa,QAAQ,GAAGH,QAAQ,CAACX,KAAK,CAAC;IACxCC,aAAa,CAACI,eAAe,GAAG,IAAIT,IAAI,CAACD,IAAI,CAAC;IAE9CD,eAAe,GAAGA,eAAe,GAAGiB,QAAQ,CAACX,KAAK,CAAC;IACnDP,QAAQ,CAACa,IAAI,CAACL,aAAa,CAAC;EAChC;EACAM,WAAW,GAACG,gBAAgB;EAC5B,OAAOjB,QAAQ;AACnB;AACA,OAAO,SAASsB,iBAAiBA,CAACzB,UAAU,EAAC;EAC7C,MAAM0B,aAAa,GAAC;IAChBT,WAAW,EAACA,WAAW;IACvBU;EACJ,CAAC;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}